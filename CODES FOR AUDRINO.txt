#include <ESP8266WiFi.h>

#include <ESPAsyncTCP.h>

#include <ESPAsyncWebServer.h>

const char* ssid = "SSID";

const char* password = "PASSWORD";

const char* PARAM_INPUT_1 = "state";

const int output = 2 ;

const int buttonPin = 3;

int ledState = HIGH;          // the current state of the output pin

int buttonState;             // the current reading from the input pin

int lastButtonState = HIGH;   // the previous reading from the input pin

unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled

unsigned long debounceDelay = 10;    // the debounce time; increase if the output flickers

AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(

<!DOCTYPE HTML><html>

<head>

  <title>ESP Web Server</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <style>

    html {font-family: Arial; display: inline-block; text-align: center;}

    h2 {font-size: 3.0rem;}

    p {font-size: 3.0rem;}

    body {max-width: 600px; margin:0px auto; padding-bottom: 25px;}

    .switch {position: relative; display: inline-block; width: 108px; height: 50px}

    .switch input {display: none}

    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 34px}

    .slider:before {position: absolute; content: ""; height: 40px; width: 40px; left: 6px; bottom: 5px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border-radius: 68px}

    input:checked+.slider {background-color: #2196F3}

    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}

    h4{font-size:28px;}

    #outputState{background:gainsboro;padding:2px 18px;font-size:28px;margin-left:10px;border-radius:3px;}

  </style>

</head>

<body>

  <h2 style="font-size:34px;color:#222;text-align:center; background-color:#f3f3f3;margin:0 0 30px 0;padding:20px 0;">ESP-01 Smart Switch</h2>

  <div style="font-size:28px;">

  </div>

  %BUTTONPLACEHOLDER%

<script>function toggleCheckbox(element) {

  var xhr = new XMLHttpRequest();

  if(element.checked){ xhr.open("GET", "/update?state=0", true); }

  else { xhr.open("GET", "/update?state=1", true); }

  xhr.send();

}

setInterval(function ( ) {

  var xhttp = new XMLHttpRequest();

  xhttp.onreadystatechange = function() {

    if (this.readyState == 4 && this.status == 200) {

      var inputChecked;

      var outputStateM;

      if( this.responseText == 1){

        inputChecked = false;

        outputStateM = "Off";

      }

      else {

        inputChecked = true;

        outputStateM = "On";

      }

      document.getElementById("output").checked = inputChecked;

      document.getElementById("outputState").innerHTML = outputStateM;

    }

  };

  xhttp.open("GET", "/state", true);

  xhttp.send();

}, 1000 ) ;

</script>

</body>

</html>

)rawliteral";

String processor(const String& var){

  if(var == "BUTTONPLACEHOLDER"){

    String buttons ="";

    String outputStateValue = outputState();

    if(buttonState){

    buttons+= "<h4>Switch: On </h4>";   

    }

    else{

    buttons+= "<h4>Switch: Off </h4>";   

    }

    buttons+= "<h4>Load <span id=\"outputState\"></span></h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"output\" " + outputStateValue + "><span class=\"slider\"></span></label>";

    return buttons;

  }

  return String();

}

String outputState(){

  if(digitalRead(output)==0){

    return "checked";

  }

  else {

    return "";

  }

  return "";

}

void setup(){

  pinMode(3, FUNCTION_3);

  pinMode(3, OUTPUT);

  pinMode(output, OUTPUT);

  digitalWrite(output, HIGH);

  pinMode(buttonPin, INPUT);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {

    delay(1000);

    Serial.println("Connecting to WiFi..");

  }

  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){

    request->send_P(200, "text/html", index_html, processor);

  });

  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {

    String inputMessage;

    String inputParam;

    if (request->hasParam(PARAM_INPUT_1)) {

      inputMessage = request->getParam(PARAM_INPUT_1)->value();

      inputParam = PARAM_INPUT_1;

      digitalWrite(output, inputMessage.toInt());

      ledState = !ledState;

    }

    else {

      inputMessage = "No message sent";

      inputParam = "none";

    }

    Serial.println(inputMessage);

    request->send(200, "text/plain", "OK");

  });

  server.on("/state", HTTP_GET, [] (AsyncWebServerRequest *request) {

    request->send(200, "text/plain", String(digitalRead(output)).c_str());

  });

  server.begin();

}

void loop() {

  int reading = digitalRead(buttonPin);

  if (reading != lastButtonState) {

    lastDebounceTime = millis();

  }

  if ((millis() - lastDebounceTime) > debounceDelay) {

    if (reading != buttonState) {

      buttonState = reading;

        if(digitalRead(buttonPin)==0)

        digitalWrite(output, HIGH);

        else

        if(digitalRead(buttonPin)==1)

        digitalWrite(output, LOW);

      }

    }

    lastButtonState = reading;

  }